 -*- MODEuu: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defconst auser-hostname
  (car (split-string system-name "\\." t))
  "The hostname for the current system.")

(defconst auser-home-dir
  (getenv "HOME")
  "The full path of the user's home directory.")

(defconst auser-yadr-dir
  (expand-file-name ".yadr" auser-home-dir)
  "The yadr directory")

(defconst auser-yadr-emacs-dir
  (expand-file-name "emacs" auser-yadr-dir)
  "Top level directory for local configuration and code.")

(defconst auser-layer-dir
  (expand-file-name "auser" auser-yadr-emacs-dir)
  "Local storage directory for custom layers")

(defconst auser-spacemacs-d-dir
  (expand-file-name ".spacemacs.d" auser-home-dir)
  "Top level directory for local Spacemacs configuration and code.")

(message auser-yadr-emacs-dir)

;; ;; Load system specific config, if it exists
;; (let ((auser-system-specific-config
;;        (expand-file-name
;;         (concat auser-hostname ".el") auser-spacemacs-d-dir)))
;;   (if (file-readable-p auser-system-specific-config)
;;       (load-file auser-system-specific-config)))

(add-to-list 'load-path auser-yadr-dir)

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path `(,auser-layer-dir)
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-sort-by-usage t
                      auto-completion-enable-snippets-in-popup t
                      auto-completion-complete-with-key-sequence nil)
     emacs-lisp
     (git :variables
          git-gutter-use-fringe t)
     markdown
     (org :variables
          org-enable-github-support t)
     shell
     osx
     lua
     html
     clojure
     react
     ruby
     spacemacs
     search-engine
     restclient
     python
     pandoc
     sql
     dockerfile
     colors
     themes-megapack
     dash
     eyebrowse
     yaml
     )
   ;; List of additional packages that will be installed wihout being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(
   ;;                                    (fuse :location (recipe
   ;;                                                     :fetcher github
   ;;                                                     :repo "kristianhasselknippe/fuse-emacs"))
                                      )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed.
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spolsky
                         ujelly
                         monokai
                         solarized-light
                         solarized-dark
                         leuven
                         monokai
                         zenburn)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 16
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f) is replaced.
   dotspacemacs-use-ido nil
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible value is `all',
   ;; `current' or `nil'. Default is `all'
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; Ruby rails mode
   ruby-enable-ruby-on-rails-support t
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   )
  ;; User initialization goes here
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)

  )

(defun dotspacemacs/user-init ()
  "User initialization code"

  ;; https://github.com/syl20bnr/spacemacs/issues/774
  (setq desktop-dirname             "~/.emacs.d/session/"
        desktop-path                (list desktop-dirname)
        desktop-files-not-to-save   "^$"
        desktop-restore-eager 5) ;; lazily restore desktop buffers
  (desktop-save-mode 1)

  (undohist-initialize)
  ;; (setq inhibit-splash-screen t)
  ;; (add-hook 'after-init-hook (lambda () (org-agenda nil "n")))
  ;; (setq org-agenda-window-setup 'current-window)

  )

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."

   ;;; Show only files tracked by git in helm-projectile
  (setq projectile-git-command "git ls-files -zc --exclude-standard")
  (bind-key (kbd "C-SPC") 'helm-projectile)

  ;; Don't replace the clipboard
  (fset 'evil-visual-update-x-selection 'ignore)

  ;; Username and things
  (setq user-full-name "Ari Lerner")

  (defun setup-terminal ()
    "Setup term"
    ;; ZSH
    (add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))
    (setq exec-path (append exec-path '("/usr/local/bin")))
    (setq exec-path (append exec-path '("~/.bin")))

    ;; set terminal command
    (defun start-term () (interactive) (term "/bin/zsh"))
    (evil-leader/set-key "at" 'start-term)

    ;; Respect remote path
    (require 'tramp)
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

    )

  (defun setup-tern ()
    "Set up tern"
    (add-to-list 'load-path "/Users/auser/.yadr/emacs/tern/emacs")
    (autoload 'tern-mode "tern.el" nil t)
    (add-hook 'js-mode-hook (lambda () (tern-mode t)))
    (eval-after-load 'tern
      '(progn
         (require 'tern-auto-complete)
         (tern-ac-setup)))
    )

  ;; (defun setup-helm ()
  ;;   "Setup helm"
  ;;   (use-package helm
  ;;     :defer 5
  ;;     :commands (helm-execute-persistent-action
  ;;                helm-select-action
  ;;                helm-grep-mode-jump-other-window
  ;;                helm-grep-mode-jump-other-window-forward
  ;;                helm-grep-mode-jump-other-window-backward)
  ;;     :config
  ;;     (progn
  ;;       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
  ;;       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  ;;       (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  ;;       (define-key helm-map (kbd "C-h")  'helm-find-files-up-one-level)
  ;;       (define-key helm-map (kbd "C-S-j")  'helm-scroll-other-window)
  ;;       (define-key helm-map (kbd "C-S-k")  'helm-scroll-other-window-down)
  ;;       (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  ;;       (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  ;;       (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)
  ;;       (setq helm-split-window-in-side-p t)
  ;;       )
  ;;     )
  ;;   )

  (defun setup-snippets ()
    ;; Setup snippets
    (setq auto-completion-private-snippets-directory
          "~/.yadr/emacs/auser/snippets/")
    ;; (add-to-list 'yas-snippet-dirs auser-yadr-emacs-dir)
    )

  (defun setup-indentation (n)
    ;; web development
    (setq coffee-tab-width n) ; coffeescript
    (setq javascript-indent-level n) ; javascript-mode
    (setq js-indent-level n) ; js-mode
    (setq js2-basic-offset n) ; js2-mode
    (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
    (setq web-mode-css-indent-offset n) ; web-mode, css in html file
    (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
    (setq web-mode-attr-indent-offset n)
    (setq css-indent-offset n) ; css-mode
    )

  (defun setup-osx-keybindings ()
    "Setup osx keybindings"
    (global-set-key (kbd "<s-right>") 'move-end-of-line)
    (global-set-key (kbd "<s-left>") 'move-beginning-of-line)
    (global-set-key (kbd "s-b") 'helm-buffers-list)
    (global-set-key (kbd "<s-up>") 'beginning-of-buffer)
    (global-set-key (kbd "<s-down>") 'end-of-buffer)
    (global-set-key (kbd "C-=") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)

    (global-set-key (kbd "M-[") 'previous-buffer)
    (global-set-key (kbd "M-]") 'next-buffer)
    ;; Setup widow changes

    (global-set-key (kbd "C-h") 'evil-window-left)
    (global-set-key (kbd "C-l") 'evil-window-right)
    (global-set-key (kbd "C-k") 'evil-window-up)
    (global-set-key (kbd "C-j") 'evil-window-down)
    )

  (defun setup-editing ()
    ;; (interactive)

    (require 'linum)
    (defun linum-update-window-scale-fix (win)
      "fix linum for scaled text"
      (set-window-margins win
                          (ceiling (* (if (boundp 'text-scale-mode-step)
                                          (expt text-scale-mode-step
                                                text-scale-mode-amount) 1)
                                      (if (car (window-margins))
                                          (car (window-margins)) 1)
                                      ))))
    (advice-add #'linum-update-window :after #'linum-update-window-scale-fix)
    (global-linum-mode)
    (global-visual-line-mode)

    (golden-ratio-mode 1)
    (rainbow-mode 1)
    (column-number-mode 1)
    ;; (fancy-battery-mode 1)
    ;; (whitespace-mode 1)
    ;; (add-hook 'after-init-hook #'global-flycheck-mode)
    ;; (setq flycheck-check-syntax-automatically '(save mode-enabled idle-change))
    ;; (setq flycheck-idle-change-delay 5)

    ;; (add-hook 'prog-mode-hook 'highlight-indentation-current-column-mode)

    ;; JSX in `web-mode`
    (add-to-list 'auto-mode-alist '("\\.jsx?" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

    ;; (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
    ;; (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
    ;; (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))

    ;; Line up args
    (with-eval-after-load 'web-mode
      (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
      (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
      (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil)))

    ;; JS Indentation
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-markup-indent-offset 2)

    ;; Whitespace & wrapping
    (setq-default truncate-lines t)
    (add-hook 'before-save-hook 'delete-trailing-whitespace)


    ;; Editor Config is conf-mode by default
    (add-to-list 'auto-mode-alist '(".editorconfig" . conf-mode))

    ;; Make evil-mode up/down operate in screen lines instead of logical lines
    (define-key evil-motion-state-map "j" 'evil-next-visual-line)
    (define-key evil-motion-state-map "k" 'evil-previous-visual-line)

    ;; Also in visual mode
    (define-key evil-visual-state-map "j" 'evil-next-visual-line)
    (define-key evil-visual-state-map "k" 'evil-previous-visual-line)

    ;; Commenting
    (global-set-key (kbd "s-/") 'evilnc-comment-operator)
    )

  (defun setup-python ()
    "Setup python"

    (defun setup-pyenv-for-project-name ()
      "Set pyenv matching project name"
      (let ((project (projectile-project-name)))
        (when (member project (pyenv-mode-versions))
          (pyenv-mode-set project))
        ))

    (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)

    (require 'f)
    (defun auto-setup-pyenv-hook ()
      "Automatically activate pyenv version is .python-version file exists"
      (f-traverse-upwards
       (lambda (path)
         (let ((pyenv-version-path (f-expand ".python-version" path)))
           (if (f-exists? pyenv-version-path)
               (pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8)))))))
      )

    (add-hook 'find-file-hook 'auto-setup-pyenv-hook)
    )


  (defun my-personal-code-style ()
    ;; (interactive)
    (message "Custom setup")
    (setup-terminal)
    ;; (setup-helm)
    (setup-tern)
    (setq indent-tabs-mode nil) ; use space instead of tab
    (setup-osx-keybindings)
    (setup-editing)
    (setup-indentation 2) ; indent 2 spaces width

    ;; (setup-erc)
    (setup-snippets)

    ;; Language helpers
    (setup-python)
    )

  (my-personal-code-style)

  ;; ;; Setup SQL
  ;; (defun setup-sql ()
  ;;   (setq sql-postgres-login-params
  ;;           '((user :default "postgres")
  ;;           (database :default "postgres")
  ;;           (server :default "localhost")
  ;;           (port :default 5432)))

  ;;   (setq sql-connection-alist
  ;;           '((webdev (sql-product 'postgres)
  ;;                   (sql-port 5432)
  ;;                   (sql-server "localhost")
  ;;                   (sql-user "postgres")
  ;;                   (sql-database "webdev"))
  ;;           ))

  ;;   (defun my-sql-save-history-hook ()
  ;;     (let ((lval 'sql-input-ring-file-name)
  ;;           (rval 'sql-product))
  ;;       (if (symbol-value rval)
  ;;           (let ((filename
  ;;                  (concat "~/.emacs.d/sql/"
  ;;                          (symbol-name (symbol-value rval))
  ;;                          "-history.sql")))
  ;;             (set (make-local-variable lval) filename))
  ;;         (error
  ;;          (format "SQL history will not be saved because %s is nil"
  ;;                  (symbol-name rval))))))

  ;;   (defun auser/sql-connect-server (connection)
  ;;     "Connect to the input server using tmtxt/sql-servers-list"
  ;;     (interactive
  ;;      (helm-comp-read "Select server: " (mapcar (lambda (item)
  ;;                                                  (list
  ;;                                                   (symbol-name (nth 0 item))
  ;;                                                   (nth 0 item)))
  ;;                                                sql-connection-alist))))

  ;;   (add-hook 'sql-interactive-mode-hook
  ;;             (lambda ()
  ;;               (toggle-truncate-lines t)
  ;;               (my-sql-save-history-hook)
  ;;               (setq-local show-trailing-whitespace nil)))

  ;;   (provide 'auser/sql)
  ;;   )

  ;; (defun setup-helpers ()
  ;;   (defun eval-and-replace ()
  ;;     "Replace the preceding sexp with its value."
  ;;     (interactive)
  ;;     (backward-kill-sexp)
  ;;     (condition-case nil
  ;;         (prin1 (eval (read (current-kill 0)))
  ;;                (current-buffer))
  ;;       (error (message "Invalid expression")
  ;;              (insert (current-kill 0)))))

  ;;   (global-set-key (kbd "C-c e") 'eval-and-replace)
  ;;   )

  ;; (setup-sql)
  ;; (setup-helpers)

  ;; (setup-java)
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(package-selected-packages
   (quote
    (zonokai-theme zenburn-theme zen-and-art-theme yaml-mode window-numbering web-mode volatile-highlights vi-tilde-fringe use-package underwater-theme ujelly-theme twilight-theme twilight-bright-theme twilight-anti-bright-theme tronesque-theme toxi-theme toc-org tao-theme tangotango-theme tango-plus-theme tango-2-theme tagedit sunny-day-theme sublime-themes subatomic256-theme subatomic-theme stekene-theme sql-indent spacegray-theme soothe-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme smooth-scrolling smeargle slim-mode shell-pop seti-theme scss-mode sass-mode ruby-tools ruby-test-mode robe rfringe reverse-theme reveal-in-osx-finder restclient rainbow-mode rainbow-identifiers rainbow-delimiters pyvenv pytest pyenv-mode purple-haze-theme professional-theme powerline pony-mode planet-theme pip-requirements phoenix-dark-pink-theme phoenix-dark-mono-theme pcre2el pbcopy pastels-on-dark-theme paradox pandoc-mode page-break-lines organic-green-theme org-repo-todo org-present org-pomodoro org-bullets open-junk-file oldlace-theme occidental-theme obsidian-theme noctilux-theme niflheim-theme neotree naquadah-theme mustang-theme multi-term move-text monokai-theme monochrome-theme molokai-theme moe-theme mmm-mode minimal-theme material-theme markdown-toc magit macrostep lush-theme lua-mode linum-relative light-soap-theme leuven-theme less-css-mode jazz-theme ir-black-theme inkpot-theme info+ indent-guide ido-vertical-mode hy-mode hungry-delete htmlize hl-anything highlight-parentheses highlight-numbers highlight-indentation heroku-theme hemisu-theme helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-gitignore helm-descbinds helm-css-scss helm-c-yasnippet helm-ag hc-zenburn-theme guide-key-tip gruvbox-theme gruber-darker-theme grandshell-theme gotham-theme google-translate golden-ratio gitconfig-mode gitattributes-mode git-timemachine git-messenger gh-md gandalf-theme fringe-helper flx-ido flatui-theme flatland-theme firebelly-theme fill-column-indicator fancy-battery expand-region exec-path-from-shell evil-visualstar evil-tutor evil-terminal-cursor-changer evil-surround evil-search-highlight-persist evil-org evil-numbers evil-nerd-commenter evil-matchit evil-lisp-state evil-indent-textobject evil-iedit-state evil-exchange evil-escape evil-args evil-anzu espresso-theme enh-ruby-mode engine-mode emmet-mode elisp-slime-nav dockerfile-mode django-theme dash-at-point darktooth-theme darkmine-theme darkburn-theme dakrone-theme cython-mode cyberpunk-theme company-web company-statistics company-quickhelp company-anaconda colorsarenice-theme color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized clues-theme clj-refactor clean-aindent-mode cider-eval-sexp-fu cherry-blossom-theme busybee-theme bundler buffer-move bubbleberry-theme birds-of-paradise-plus-theme auto-yasnippet auto-highlight-symbol auto-dictionary apropospriate-theme anti-zenburn-theme ample-zen-theme ample-theme align-cljlet alect-themes aggressive-indent afternoon-theme adaptive-wrap ace-window ace-link ace-jump-mode ac-ispell)))
 '(paradox-github-token t)
 '(ring-bell-function (quote ignore)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;; '(default ((((class color) (min-colors 89)) (:foreground "#ffffff" :background "#000000"))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
